<project name="FedoraWebServices" default="usage">
  <property file="repository.properties" />
  <property file="build.properties" />
	
  <tstamp>
    <format property="TODAY" pattern="d MMMM yyyy" locale="en"/>
    <format property="TSTAMP" pattern="hh:mm:ss" locale="en"/>
  </tstamp>
  
  <path id="axis2.libs">
    <fileset dir="${axis2.lib.dir}"><include name="**/*.jar" /></fileset>
  </path>
  
  <!-- ********************************************************************************** -->
  <!-- Propertyset definitions to use when calling the main build section -->
  <propertyset id="properties-starting-with-api-a">
    <propertyref prefix="api-a"/>
    <mapper type="glob" from="api-a*" to="client*"/>
  </propertyset>
  
  <propertyset id="properties-starting-with-api-m">
    <propertyref prefix="api-m"/>
    <mapper type="glob" from="api-m*" to="client*"/>
  </propertyset>
  <!-- ********************************************************************************** -->
  
  <!-- API-A service -->
  <target name="api-a" description="Builds the client for the Fedora API-A Service">
    <antcall target="--generateClient">
      <propertyset refid="properties-starting-with-api-a"/>
    </antcall>

    <antcall target="--buildClient">
      <propertyset refid="properties-starting-with-api-a"/>
    </antcall>
  </target>
  
  <!-- API-M service -->
  <target name="api-m" description="Builds the client for the Fedora API-M Service">
    <antcall target="--generateClient">
      <propertyset refid="properties-starting-with-api-m"/>
    </antcall>

    <antcall target="--buildClient">
      <propertyset refid="properties-starting-with-api-m"/>
    </antcall>
  </target>
  
  <!-- This is the internal target that builds a client, based on the propertyset
       definition that's in use at the time of the antcall that starts the build.
       This target cannot be called from the commandline -->
  <target name="--buildClient">
    <!-- First need to update the Axis2 classpath to point to the Axis2 jars -->
    <replace file="${client.generated.dir}/build.xml"
             token="${env.AXIS2_HOME}"
             value="${axis2.lib.dir}"/>
    <replace file="${client.generated.dir}/build.xml"
             token="lib/*.jar"
             value="*.jar"/>

    <!-- Build the client that was generated by Axis2 -->
    <ant antfile="build.xml" dir="${client.generated.dir}" target="${axis2.build.client.target.name}"/>

    <!-- Normally you would get two jars from the Axis2 build file. A client jar and an XMLBeans type jar.
         The next two steps bypass those jars and instead create one client jar containing everything the
         client needs. -->

    <!-- Make sure the XMLBeans types are in the client library -->
    <copy todir="${client.generated.dir}/build/classes" overwrite="true">
      <fileset dir="${client.generated.dir}/resources">
        <include name="**/schemaorg_apache_xmlbeans/**"/>
      </fileset>
    </copy>

    <mkdir dir="${client.jar.dir}"/>

		<!-- Create the client jar -->
    <jar jarfile="${client.jar.dir}/${client.jar}"
         basedir="${client.generated.dir}/build/classes">
      <manifest>
        <attribute name="Implementation-Vendor" value="CTREP"/>
        <attribute name="Implementation-Title" value="${client.implementation.title}"/>
        <attribute name="Implementation-Version" value="${fedora.version}"/>
        <attribute name="Implementation-Date" value="${TODAY} ${TSTAMP}"/>
        <attribute name="Built-By" value="${user.name}"/>
      </manifest>
    </jar>

    <!-- Deploy the jar to the maven2 repository -->
    <copy todir="${client.jar.deploy.dir}" overwrite="true">
      <fileset dir="${client.jar.dir}">
        <include name="*.jar"/>
      </fileset>
    </copy>
  </target>
	
  <target name="--generateClient">
	  <delete dir="${client.generated.dir}"/>
	  
    <java classname="org.apache.axis2.wsdl.WSDL2Java" fork="true">
      <classpath refid="axis2.libs" />
      <arg value="-uri"/>
      <arg value="${client.wsdl}"/>
      <arg value="-d"/>
      <arg value="xmlbeans"/>
      <arg value="-xsdconfig"/>
      <arg value="${xsdconfig.file}"/>
      <arg value="-o"/>
      <arg value="${client.generated.dir}"/>
      <arg value="-p"/>
      <arg value="${client.package}"/>
    </java>
  </target>

  <target name="clean" description="Deletes the build directory">
    <delete dir="${ws.build.dir}"/>
    <ant antfile="build.xml" dir="${tests.dir}" target="${tests.target.clean}"/>
  </target>
  
  <target name="clients"
          description="Builds all the Fedora web service clients"
          depends="clean">
    <antcall target="api-a" />
    <antcall target="api-m" />
  </target>
  
  <target name="run-tests" description="Runs the tests">
    <ant antfile="build.xml" dir="${tests.dir}" target="${tests.target}"/>
  </target>
  
  <target name="all"
  				description="Generates and compiles the clients and runs the tests"
  				depends="clients, run-tests" />
  
  <target name="usage">
  	<echo>
  		Fedora ${fedora.version} web services client generation.
  		The web services clients supported are:
  		
  		API-A : The Fedora Access service for accessing digital objects.
  		API-M : The Fedora Management service for administering the repository.
  		
  		Client libraries can be found in the directories:
  		build/SERVICE_TYPE/client/${fedora.version}/dist
  		
  		all		: Generates and compiles the clients and runs all the tests. You need to install and start Fedora first.
  		clients		: Generates client libraries for all services.
  		api-a		: Generates client libraries for the API-A service.
  		api-m		: Generates client libraries for the API-M service.
  		run-tests	: Runs the web services tests. You need to install and start Fedora first.
      clean   : Cleans the client and tests builds.
    </echo>
  </target>
</project>
